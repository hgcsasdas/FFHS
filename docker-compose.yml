version: "3.9"
services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: filehost-postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    # ports:
    #   - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Spring Boot
  backend:
    build:
      context: ./filehost
      dockerfile: Dockerfile
    container_name: filehost-backend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      APP_USER: ${APP_USER}
      APP_PASSWORD: ${APP_PASSWORD}
      API_KEY: ${API_KEY}
      SECRET_KEY: ${SECRET_KEY} 
      UPLOAD_DIR: /app/uploads
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
      FILEENTITY_MAX_SIZE: ${MAX_FILE_SIZE_MB}
      APP_API_BASE_URL: ${SERVICE_URL_BACKEND}

    # ports:
    #   - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - uploads_data:/app/uploads

  # Frontend Vite
  frontend:
    build:
      context: ./filehost-frontend
      dockerfile: Dockerfile
      args:
        VITE_API_BASE: ${SERVICE_URL_BACKEND}
    container_name: filehost-frontend
    restart: unless-stopped
    ports:
      - "5173:80"
    depends_on:
      - backend

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./filehost/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - '9090:9090'
    depends_on:
      - backend

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: secret
      GF_AUTH_ANONYMOUS_ENABLED: "true" # Consider false in production
    ports:
      - '3000:3000'

volumes:
  postgres_data:
  uploads_data: 